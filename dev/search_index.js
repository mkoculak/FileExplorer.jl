var documenterSearchIndex = {"docs":
[{"location":"ls/#List-view","page":"List view","title":"List view","text":"","category":"section"},{"location":"ls/","page":"List view","title":"List view","text":"FileExplorer.jl makes it easy to quickly display contents of a folder in the REPL. Since it tries to mimic the behavior of popular commands like ls and dir, functions under these names are exported.","category":"page"},{"location":"ls/#LS","page":"List view","title":"LS","text":"","category":"section"},{"location":"ls/","page":"List view","title":"List view","text":"The default display of content shows just the names of the elements in a grid.","category":"page"},{"location":"ls/","page":"List view","title":"List view","text":"pathToFileExplorer = \"../../\"","category":"page"},{"location":"ls/","page":"List view","title":"List view","text":"using FileExplorer\n\nf = Folder(pathToFileExplorer)\nls(f)","category":"page"},{"location":"ls/","page":"List view","title":"List view","text":"The default settings should provide a familiar experience to similar commands in the terminal. However, package provides a number of additional options for customisation. For example, you can increase the spacing between elements with the padding keyword argument (default is 2 characters).","category":"page"},{"location":"ls/","page":"List view","title":"List view","text":"ls(f, padding=10)","category":"page"},{"location":"ls/","page":"List view","title":"List view","text":"Increased padding reveals that elements are populated in the grid column-wise. You can change the direction with the dims keyword argument (default is 1).","category":"page"},{"location":"ls/","page":"List view","title":"List view","text":"ls(f, padding=10, dims=2)","category":"page"},{"location":"ls/","page":"List view","title":"List view","text":"Additionally, there is also a \"long\" format available that displays elements in a single column with additional information about each element (similarly to ls -l command).","category":"page"},{"location":"ls/","page":"List view","title":"List view","text":"ls(f, long=true)","category":"page"},{"location":"ls/","page":"List view","title":"List view","text":"Since there is more information displayed, additional keywords are available to customise the output. For example, you can change the format of file sizes to include units as well as control the degree of rounding the numbers.","category":"page"},{"location":"ls/","page":"List view","title":"List view","text":"ls(f, long=true, unit=:mem, precision=0)","category":"page"},{"location":"ls/","page":"List view","title":"List view","text":"Please check the reference tab or the docstrings for a complete list of available options.","category":"page"},{"location":"ls/#DIR","page":"List view","title":"DIR","text":"","category":"section"},{"location":"ls/","page":"List view","title":"List view","text":"Package also provides a dir function, but it is only an alias for ls with the long keyword argument set to true. It is provided to make it easier for users to get this popular display style without the need for keywords. However, you can use the same keywords to change the output - they will be passed to the ls method. For example, we can add the header to the columns.","category":"page"},{"location":"ls/","page":"List view","title":"List view","text":"dir(f, header=true)","category":"page"},{"location":"customisation/#Customisation","page":"Customisation","title":"Customisation","text":"","category":"section"},{"location":"customisation/","page":"Customisation","title":"Customisation","text":"Current implementation allows for basic customisation of how the elements are displayed. This is handled by the style property each Folder and File object has. There, we can change the color of the text as well as the Unicode icon that is used in the tree view.","category":"page"},{"location":"customisation/","page":"Customisation","title":"Customisation","text":"pathToFileExplorer = \"../../\"","category":"page"},{"location":"customisation/","page":"Customisation","title":"Customisation","text":"using FileExplorer\nf = Folder(pathToFileExplorer)\nbrowse(f)","category":"page"},{"location":"customisation/","page":"Customisation","title":"Customisation","text":"f[\"docs\"].style[:color] = \"red\"\nf[\"Project.toml\"].style[:icon] = \"🗼\"\nbrowse(f)","category":"page"},{"location":"customisation/","page":"Customisation","title":"Customisation","text":"There is also a rudimentary system of changing there properties for all elements of the same type through a global style dictionary (which is not exported).","category":"page"},{"location":"customisation/","page":"Customisation","title":"Customisation","text":"FileExplorer.style[:file_color] = \"green\"\nFileExplorer.style[:folder_icon] = \"💼\"\n\nbrowse(f)","category":"page"},{"location":"customisation/","page":"Customisation","title":"Customisation","text":"As you can see, local object setting superseed the global style dictionary. In the future, we would like this functionality to be handled by Preferences.jl.","category":"page"},{"location":"browse/#Tree-view","page":"Tree view","title":"Tree view","text":"","category":"section"},{"location":"browse/","page":"Tree view","title":"Tree view","text":"FileExplorer.jl provides also a tree-like view into the contents of a folder. Right now it is only a thin wrapper around the functionality provided by the AbstractTrees.jl package.","category":"page"},{"location":"browse/#browse","page":"Tree view","title":"browse","text":"","category":"section"},{"location":"browse/","page":"Tree view","title":"Tree view","text":"Calling browse on a path or a folder structure will display its contents in a hierarchical view.","category":"page"},{"location":"browse/","page":"Tree view","title":"Tree view","text":"pathToFileExplorer = \"../../\"","category":"page"},{"location":"browse/","page":"Tree view","title":"Tree view","text":"using FileExplorer\n\nf = Folder(pathToFileExplorer)\nbrowse(f)","category":"page"},{"location":"browse/","page":"Tree view","title":"Tree view","text":"We set only a few keyword arguments differently than AbstractTrees.jl, but the function passes all of them further, so you can use all options they provide. For example, you can change the maxdepth option to display deeper folder structures and also decide to show that there are more elements in the folder than displayed.","category":"page"},{"location":"browse/","page":"Tree view","title":"Tree view","text":"browse(f, maxdepth=2, indicate_truncation=true)","category":"page"},{"location":"browse/","page":"Tree view","title":"Tree view","text":"In the future, we want to provide an easy way to customise most of the elements of the output, however right now only very basic customisation is available. For details, please look at the Customisation section.","category":"page"},{"location":"reference/#Abstract-Types","page":"Reference","title":"Abstract Types","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"FileExplorer.ExpNode\nFileExplorer.AbstractFolder\nFileExplorer.AbstractFile","category":"page"},{"location":"reference/#FileExplorer.ExpNode","page":"Reference","title":"FileExplorer.ExpNode","text":"ExpNode\n\nAbstract type for representing all the objects in the file system.\n\n\n\n\n\n","category":"type"},{"location":"reference/#FileExplorer.AbstractFolder","page":"Reference","title":"FileExplorer.AbstractFolder","text":"AbstractFolder <: ExpNode\n\nAbstract type for representing folder types in the file system.\n\n\n\n\n\n","category":"type"},{"location":"reference/#FileExplorer.AbstractFile","page":"Reference","title":"FileExplorer.AbstractFile","text":"AbstractFile <: ExpNode\n\nAbstract type for representing file types in the file system.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Folder","page":"Reference","title":"Folder","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Folder\nFolder(path::String; hidden=false, lazy=false)","category":"page"},{"location":"reference/#FileExplorer.Folder","page":"Reference","title":"FileExplorer.Folder","text":"Folder <: AbstractFolder\n\nRepresent a folder and its contents as a nested structure.\n\nProperties\n\nName Type Description\npath String The path to the folder\nstat FS.StatStruct The stat information\nstyle Dict{Symbol, AbstractString} Styling parameters\nchildren OrderedDict{String, ExpNode} The contents of the folder\nnFolders Int64 The number of subfolders\nnFiles Int64 The number of files\n\n\n\n\n\n","category":"type"},{"location":"reference/#FileExplorer.Folder-Tuple{String}","page":"Reference","title":"FileExplorer.Folder","text":"Folder(path::String; hidden=false, lazy=false)\n\nRepresent a folder and its contents as a nested structure.\n\npath: The path to the folder.\nhidden=false: Whether to include hidden files and folders.\nlazy=false: Whether to map contents of the subfolders.\n\n\n\n\n\n","category":"method"},{"location":"reference/#File","page":"Reference","title":"File","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"File\nFile(path::String)","category":"page"},{"location":"reference/#FileExplorer.File","page":"Reference","title":"FileExplorer.File","text":"File <: AbstractFile\n\nRepresent a file in the file system.\n\nProperties\n\nName Type Description\npath String The path to the file\nstat FS.StatStruct The stat information\nstyle Dict{Symbol, AbstractString} Styling parameters\n\n\n\n\n\n","category":"type"},{"location":"reference/#FileExplorer.File-Tuple{String}","page":"Reference","title":"FileExplorer.File","text":"File(path::String)\n\nRepresent a file in the file system.\n\npath: The path to the file.\n\n\n\n\n\n","category":"method"},{"location":"reference/#List-elements","page":"Reference","title":"List elements","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"ls(folder::FileExplorer.AbstractFolder)\ndir(folder::FileExplorer.AbstractFolder)","category":"page"},{"location":"reference/#FileExplorer.ls-Tuple{FileExplorer.AbstractFolder}","page":"Reference","title":"FileExplorer.ls","text":"ls(folder::AbstractFolder; kwargs...)\n\nList the contents of a folder in a grid format. Function mimics the behavior of ls command in Unix-like systems. By default, it tries to fit all elements in the most vertically compact layout (with some default settings, like padding size). There is a number of keyword arguments that can be used to customize the output. Most notably, passing long=true will display the content in a single column with typical details like permissions, size, and modification date, similarly to ls -l. The actual displayed information will depend on the operating system.\n\nPossible keyword arguments:\n\nlong::Bool: Display the content in a single column view. Default is false.\npadding::Int: The number of spaces between the columns. Default is 2.\ndims::Int: The direction of the layout. For elements ordered column-wise use 1, for row-wise use 2. Default is 1.\nmaxWidth::Int: The maximum width of the columns in characters. Default is 30.\nunit::Symbol: The unit to use for file sizes. Possible values are :none, :mem, and :memi. Default is :none.\nprecision::Int: The number of decimal places to show for file sizes. Default is 2.\nuid::Bool: Display the user ID. Default is false.\ngid::Bool: Display the group ID. Default is false.\nheader::Bool: Display the header with column names. Default is false.\n\n\n\n\n\n","category":"method"},{"location":"reference/#FileExplorer.dir-Tuple{FileExplorer.AbstractFolder}","page":"Reference","title":"FileExplorer.dir","text":"dir(path::String; kwargs...)\ndir(folder::AbstractFolder; kwargs...)\n\nList the contents of a directory in a long version, similar to the behavior of dir in Windows. Under the hood it is just calling ls with long=true. Other keyword arguments are passed to the ls call. Please look there for more detailed list.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Browse-elements","page":"Reference","title":"Browse elements","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"browse(folderpath::String; hidden=false, lazy=false, kwargs...)\nbrowse(folder::FileExplorer.AbstractFolder; maxdepth=1, indicate_truncation=false, prefix=\" \", kwargs...)","category":"page"},{"location":"reference/#FileExplorer.browse-Tuple{String}","page":"Reference","title":"FileExplorer.browse","text":"browse(folderpath::String; hidden=false, lazy=false, kwargs...)\n\nDisplay the contents of a folder in a tree view. Calling browse directly on a folder path will create a Folder object and pass it to the proper method. See browse(folder::AbstractFolder; kwargs...) for more details on the possible keyword arguments.\n\npath: The path to the folder.\nhidden=false: Whether to include hidden files and folders.\nlazy=false: Whether to map contents of the subfolders.\n\n\n\n\n\n","category":"method"},{"location":"reference/#FileExplorer.browse-Tuple{FileExplorer.AbstractFolder}","page":"Reference","title":"FileExplorer.browse","text":"browse(folder::AbstractFolder; maxdepth=1, indicate_truncation=false, prefix=\" \", kwargs...)\n\nDisplay the contents of a folder in a tree view. Under the hood, this function is just a thin wrapper around AbstractTrees.print_tree. We provide a default configuration through the keyword arguments mentioned explicitly in the signature. See documentation of AbstractTrees for more details on other possible keyword arguments.\n\nfolder: Folder object to display.\nmaxdepth=1: Maximum depth to display. Defaults to only the immediate children.\nindicate_truncation=false: Whether to indicate that subfolders contain more objects.\nprefix=\" \": Prefix to use for spacing from the tree structure glyphs.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Styling","page":"Reference","title":"Styling","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"FileExplorer.style","category":"page"},{"location":"reference/#FileExplorer.style","page":"Reference","title":"FileExplorer.style","text":"style::Dict{Symbol, AbstractString}\n\nDictionary containing styling options implemented in the package. Currently, the following options are available:\n\nKey Value\n:folder_icon \"📁\"\n:file_icon \"📄\"\n:folder_color \"blue\"\n:file_color \"white\"\n\n\n\n\n\n","category":"constant"},{"location":"#FileExplorer.jl","page":"Home","title":"FileExplorer.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Explore folders and files as Julia structures.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Package provides structures to represent files and folders without leaving the REPL as well as methods to display them in the terminal. This not only allows for exploring the contents of the filesystem but also provides an easy way to interact with it in Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThis package is in its early development stage and many thing might change in the future. We are also open to suggestions and contributions.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Package is not yet registered in the Julia General registry, but you can install it directly from GitHub:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/mkoculak/FileExplorer.jl.git","category":"page"},{"location":"#Basic-usage","page":"Home","title":"Basic usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The core of the package is a nested structure of Folder and File objects that represents the selected directory and its contents. To create a new Folder object, simply provide the path to the directory:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pathToFileExplorer = \"../../\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"using FileExplorer\n\nf = Folder(pathToFileExplorer)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Contents of the folder are stored as separate structures in the children field in a dictionary:","category":"page"},{"location":"","page":"Home","title":"Home","text":"f.children","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can access the contents directly by using the dictionary syntax (and this can be chained):","category":"page"},{"location":"","page":"Home","title":"Home","text":"f[\"docs\"][\"src\"]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Each Folder and File object contains additional information about itself in the stat field. This provides infromation from the stat function from the Base module and returns a StatStruct object.","category":"page"},{"location":"","page":"Home","title":"Home","text":"f[\"src\"][\"FileExplorer.jl\"].stat","category":"page"},{"location":"#Additional-options","page":"Home","title":"Additional options","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Default settings map the full hierarchy of subfolders at once as well as ignore hidden files and folders. You can change this behavior by providing additional keyword arguments.","category":"page"},{"location":"","page":"Home","title":"Home","text":"f = Folder(pathToFileExplorer; hidden=true)\nf.children","category":"page"},{"location":"","page":"Home","title":"Home","text":"Using the lazy keyword argument will prevent mapping anything else but the direct children of the folder. At the moment, you will have to repeat the call without the option or call the Folder method on the desired subfolder to map its contents.","category":"page"},{"location":"","page":"Home","title":"Home","text":"f = Folder(pathToFileExplorer; lazy=true)\nf.children","category":"page"}]
}
